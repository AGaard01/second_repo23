---
title: "tidy_data"
format: html
editor: visual
---

```{r}
#| label: setup
#| output: false
#| message: false
#| echo: false
library(tidyverse)
```

# Tidy Data

1\.
Each variable must have its own column.

2\.
Each observation must have its own row.

3\.
Each value must have its own cell.

If two of the conditions above are satisfied then the third will also be satisfied

## Table3

```{r}
table3
```

table3 not tidy.
To verdier i hver celle.

```{r}
tidy3 <- table3 |> 
  separate(
    col = rate, 
    into = c("cases", "pop"), 
    sep = "/"
  )
```

Her har vi en tidy variant av det samme datasettet.

```{r}
tidy3
```

## Table2

table2 er ikke ryddig!

```{r}
table2
```

Vi ønsker en kolonne som heter population og en som heter cases.

pivot_wider: Går fra noe som er langt over til noe som er vidt.

pivot_longer: Går fra noe som er vidt over til noe som er langt.

```{r}
tidy2 <- table2 |> 
  pivot_wider(
    names_from = type,
    values_from = count
  )
```

Her er vi over på et tidy-format.

```{r}
tidy2
```

## Table4a

I table4 har vi to tabeller; a og b.
Tabell 4a inneholder cases ordnet i to ulike tidspunkt, dvs.
ikke tidy.
Informasjonen er også spredt i to ulike tabeller.
Krav er at vi skal samle all data i en tabell for at det skal være et tidy datasett.

Vi må gjøre år om til en egen variabel, vi vil ikke har 1999 og 2000.

```{r}
table4a
```

Ta navnet på variablene (1999 og 2000) og sett inn i en ny kolonne.
Vi må først fortelle hvilke kolonner vi ønsker å formere.
Bruker cols.
Vi kan også skrive "cols = -1", som sier at vi dropper den først kolonnen.
En annen måte å gjøre det på er "cols = 2:3", dvs.
ta kolonne to og tre.
Et siste alternativ er å bruke navn; "cols = -country".
Vil få akkurat samme tabell.

```{r}
tidy4a <- table4a |> 
  pivot_longer(
    cols = c(`1999`, `2000`),
    names_to = "Year",
    values_to = "cases"
  )
```

```{r}
tidy4a
```

## Table4b

```{r}
table4b
```

Lager en ny versjon med bokstav i navn.

```{r}
ag_table4b <- table4b |> 
  rename(
    y1999 = `1999`,
    y2000 = `2000`
  )
```

```{r}
ag_table4b
```

Gjøre den tidy:

```{r}
tidy4b <- ag_table4b |> 
  pivot_longer(
    cols = c(-country),
    names_to = "year",
    values_to = "pop"
  )
```

```{r}
tidy4b
```

Vi ønsker å fjerne y for hvert år.
Bruker names_prefix, som vi finner i help ved å søke på "pivot_longer".

```{r}
tidy4b <- ag_table4b |> 
  pivot_longer(
    cols = c(-country),
    names_to = "year",
    values_to = "pop",
    names_prefix = "y"
  )
```

Her ser vi at "y" er borte.

```{r}
tidy4b
```

## Tidy4

Vi må samle alle dataene i et datasett for å gjøre det tidy.
Vi må smelte sammen de to tabellene tabel4a og table4b.
Kan bruke land på land og år på år som nøkkel.
I 99% av tilfellene ønsker vi å bruke left_join!
Bruker nesten aldri de andre joint funksjonene.
Dersom joint_left ikke fungerer kan man sjekke ut de andre, ha det i bakhodet.

Når vi kjører "tidy4 \<- left_join(tidy4a, tidy4b)", så får vi en warning.

```{r}
tidy4 <- left_join(tidy4a, tidy4b)
```

Vi ser at vi får år to ganger pga.
de har ulike navn.
Her ser vi feilen lett og kan ordne det, men det er ikke alltid tilfelle med større datasett!
Vær nøye med joins!
Det er risky å bare joine to tabeller selv om navnene er like!
Oppfordrer å alltid bruke join_by.

```{r}
tidy4
```

Her sier vi at Year skal være like year.
Vi kan også endre navn fra year til Year ved å bruke rename.

```{r}
tidy4 <- left_join(
  tidy4a, tidy4b, join_by(country, Year == year)
  ) |> 
  rename(year = Year)
```

Her er den tidy.

```{r}
tidy4
```

## Separate

Convert = TRUE gjør at R konverterer om til tall (integer).

Sep = 2, "seperate after 2 char from left", minus foran så tar den fra høyre (19 går til century og 99\* går til year).

## Unite

Unite er motsatt av seperate.

I tabellen under ønsker vi en variabel som heter year.
Vi har også to ting i en celle under rate.
Dersom man ikke gjør noe med sep, så får man årstall som 19_99.

```{r}
#| paged.print: false
table5
```

```{r}
tab5_tidy <- table5 |> 
  unite(
    col = year,
    century, year,
    sep = ""
  ) |> 
  separate(
    col = rate, 
    into = c("cases", "pop"),
    sep = "/"
    )
```

```{r}
#| paged.print: false
tab5_tidy
```

## Missing values

**Eksplisitt**: Merket som NA i rådata.

**Implisitt**: Står ikke NA-verdi, men det finnes ikke noe for observasjonen.
F.eks.
månedlig arbeidsledighetsdata, plutselig mangler mars, den er bare ikke med, da er den implisitt.

I tabellen under ser vi en eksplisitt missing i 4.
kvartal 2015.
1 kvartal 2016 er implisitt missing siden den bare ikke er der.

```{r}
stocks <- tibble(
  year   = c(2015, 2015, 2015, 
             2015, 2016, 2016, 2016),
  qtr    = c(   1,    2,    3,    
                4,    2,    3,    4),
  return = c(1.88, 0.59, 0.35,
             NA, 0.92, 0.17, 2.66)
)
stocks
```

I tabellen under ser vi at den som var implisitt missing er kommet inn som en NA.

```{r}
stocks_wider <- stocks %>% 
  pivot_wider(
    names_from = year,
    values_from = return
    )
stocks_wider
```

Her gir vi beskjed om å ikke ta med første kolonnen.
Fra wide til longer, da angir vi kolonene vi ønsker å ta over i longer format.

Under angir vi hvilken kolonne vi ikke ønsker å snu på.
Man kunne også gjort motsatt.
Siden year er en ny variabel må vi sette den i hermetegn: "year".

"values_drop_na" betyr at NA verdier vil bli droppet!

```{r}
stocks_wider %>% 
  pivot_longer(
    cols = -qtr,
    names_to = "year", # in quote since it does not exist yet
    values_to = "return",
    values_drop_na = TRUE
  ) %>% 
  arrange(year, qtr)
```

### Complete

Complete bruker vi dersom vi ønsker å se NA-verdiene.
Den gjør datasettet komplett.
Vi angir de variablene som vi ønsker å gjøre tabellen komplett ut i fra.
Her forstår complete-funksjonen at man skal ha et fjerde kvartal.
Den sørger for at det er fire kvartal for hvert av de fire årene.
Den fyller automatisk inn.
Dersom ikke fjerde kvartal var med for 2016 hadde complete-funksjonen ikke klart det.

```{r}
stocks %>% 
  complete(year, qtr)
```

### Fill

Hvem dreier NA-verdiene seg om?
Da har vi behov for å fylle det som står i NA-verdiene med det som står hakket over.

```{r}
treatment <- tribble(
  ~ person,           ~ treatment, ~response,
  "Derrick Whitmore", 1,           7,
  NA,                 2,           10,
  NA,                 3,           9,
  "Katherine Burke",  1,           4
)
treatment
```

Bruker fill for å fylle ut som Derrick (går down helt til vi kommer til et nytt navn).

```{r}
treatment %>% 
  fill(person, .direction = c("down"))
```

Bruker fill for å fylle ut som Katherine (går up helt til vi kommer til et nytt navn).

```{r}
treatment %>% 
  fill(person, .direction = c("up"))
```

## Case: who

Datasettet who er helsedata fra WHO.
Dreier seg om tuberkoloseforekomster i verden.
Er et subset fra et større datasett fra WHO.
Det er 7240 rekker og 60 variabler.

Skriver man who nede i console får man se hele datasettet.

Skriver man names(who) nede i console får man navn på variablene.

```{r}
dim(who)
```

Wicham: The best place to start is almost always to gather together the columns that are not variables.
(pivot_longer()).

```{r}
# Tar datasettet og lager en egen kopi av det. who ligger i tidyr pakken. 
who <- tidyr::who
```

Angi kolonner i pivot_longer: Kan angi de vi ønsker å snu på, eller angi de vi ikke ønsker å snu på.
Prøver først å fjerne de vi ikke ønsker.
Kan bruke kolon i tidyr.

Skriver man table(is.na(who\$values)) nede i console så ser man hvor mange NA man har (TRUE) og hvor mange som ikke er det (FALSE).

Hvilke verdier finnes i en variabel?
Skriv unique(who\$year) nede i console.

```{r}
who <- who |> 
  pivot_longer(
    cols = -c(country:year), 
    names_to = "Categories",
    values_to = "Values"
  )
```

Vi skal nå rydde i who datasettet.
Legger det inn i tmp først slik at vi ikke ødelegger noe.
Bytter tmp med who etterpå dersom det vi gjør fungerer.

Bruker str_replace for å legge til en underscore slik at det blir lettere å sortere dataene.

Vi ønsker videre å formatere alder slik at vi ser det bedre.
Problemet er 014 og 65 som gjør at vi ikke kan skille med sep = 2 (f.eks. 1524).

```{r}
who <- who |> 
  mutate(
    Categories = str_replace(Categories, "newrel", "new_rel"),
    Categories = str_replace(Categories, "new_", "")
  ) |> 
  separate(
    col = Categories,
    into = c("Type", "genderAge"),
    sep = "_"
  ) |> 
  separate(
    col = genderAge,
    into = c("Gender", "Age"),
    sep = 1
  ) |> 
  mutate(
     Age = str_replace(Age, "65", "6599"),
  ) |> 
  separate(
    col = Age,
    into = c("AgeStart", "AgeEnd"),
    sep = -2
  )
```

Fordi vi ønsker å lage det må vi endre på alder igjen til en kolonne.
Dette er fordi vi ikke ønsker flere rader for samme år.

```{r}
who <- who |> 
  unite(
    col = "age", 
    AgeStart, AgeEnd, 
    sep = "_"
  )
```
